setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 10000)
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
##SSOR##
Rcpp::sourceCpp("/Users/zhou/Desktop/ConjugateNNGP-master/simulation/src/iter.cc")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
benchmark(solveCGwithIncompleteCholesky(XTX_star, XTY_star[1:(N + P)]),cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##solveCGwithDiagonalPreconditioner##
benchmark(solveCGwithDiagonalPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##solveCGwithDiagonalPreconditioner##
benchmark(solveCGwithDiagonalPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##solveCGwithDiagonalPreconditioner##
benchmark(solveCGwithDiagonalPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##IncompleteLUT##
benchmark(solveCGwithIncompleteLUT(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##IncompleteLUT##
benchmark(solveCGwithIncompleteLUT(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##solveCGwithDiagonalPreconditioner##
benchmark(solveCGwithDiagonalPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##IncompleteLUT##
benchmark(solveCGwithIncompleteLUT(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
source("./src/functions.R")
##IncompleteLUT##
benchmark(solveCGwithIncompleteLUT(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
setwd("./") # set to the path of ConjugateNNGP
setwd("./simulation")
rm(list = ls())
load("./data/buildNN/nngp_10.RData")
source("./src/functions.R")
library(foreach)
library(doParallel)
library(parallel)
library(rbenchmark)
## set estimates for phi and deltasq from cross-validation "spConjNNGP" ##
phi <- 17.64706; deltasq <- 0.09000
delta <- sqrt(deltasq)
a = as; b = bs;
ind_x <-c(c(rep(2:M, times = 1:(M - 1)), rep(((M + 1) : N), each = M)), 1:N)
ind_y <- c(c(t(NN.matrix$NN_ind))[which(c(t(NN.matrix$NN_ind)) > 0)], 1:N)
X.ord <- X[NN.matrix$ord, ]
Y.ord <- Y[NN.matrix$ord]
## obtain A and D using C and N(i)
AD <- getADstan(neardist = NN.matrix$NN_dist,  neardistM = NN.matrix$NN_distM,
N = N, M = M, phi = phi)
D <- AD[M + 1, ]
ind_x_X <- rep(1:N, P); ind_y_X <- rep(1:P, each = N)
ind_x_X_up <- c(ind_x_X, 1:N)
ind_y_X_up <- c(ind_y_X, (P + 1):(N + P))
X_star_up <-
sparseMatrix(ind_x_X_up, ind_y_X_up, x = c(as.vector(X.ord) / delta,
rep(1 / delta, N)))
X_star_down <-
sparseMatrix(i = ind_x, j = (ind_y + P),
x = c(-na.omit(as.vector(AD[-(M + 1), ])), rep(1, N))) /
sqrt(D)
#Dsqrtinv <- sparseMatrix(i = 1:N, j = 1:N, x = 1 / sqrt(D))
X_star <- rbind(X_star_up, X_star_down)
Y_star <- c(Y.ord / delta, rep(0, N))
XTY_star <- crossprod(X_star, Y_star)
XTX_star <- crossprod(X_star, X_star)
## get gamma_hat = (X*^T X*)^-1 X*^T y* by conjugate gradient ##
t <- proc.time()
gamma_hat <- cgsparse(XTX_star, XTY_star[1:(N + P)])
proc.time() - t
benchmark(cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SSOR##
benchmark(solveCGwithIdentityPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##solveCGwithDiagonalPreconditioner##
benchmark(solveCGwithDiagonalPreconditioner(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##IncompleteLUT##
benchmark(solveCGwithIncompleteLUT(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##Least Squares Conjugate Gradient##
benchmark(solveLSConjugateGradient(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SparseLU##
benchmark(solveSparseLU(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SparseQR##
benchmark(SparseQR(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
##SparseQR##
benchmark(solveSparseQR(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
.Machine
##Incomplete cholesky##
benchmark(solveCGwithIC(XTX_star, XTY_star[1:(N + P)]),
cgsparse(XTX_star, XTY_star[1:(N + P)]),replications = 1000)
xtt=solveCGwithIC(XTX_star, XTY_star[1:(N + P)])
summary(gamma_hat-xtt)
